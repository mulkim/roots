{"version":3,"sources":["components/home.js","components/about.js","components/contact.js","components/error.js","components/navigation.js","components/toolbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","classes","this","props","react_default","a","createElement","className","classNames","container","index_es","variant","color","Component","withStyles","display","flexDirection","justifyContent","alignItems","About","Contact","Error","Navigation","NavLink","to","RootsToolbar","_this$props","onMenuClicked","appBar","position","toolbar","title","menuButton","onClick","icons_index_es","loginButton","component","Link","loginButtonIcon","theme","textAlign","zIndex","marginRight","spacing","unit","fontSize","left","right","App","BrowserRouter","basename","process","navigation","Switch","Route","path","exact","mixins","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iWAeMA,0LACO,IACEC,EAAWC,KAAKC,MAAhBF,QACP,OACAG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,aAAcP,EAAQQ,YAC7CL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACIC,QAAQ,KACRC,MAAM,WAFV,gBALOC,cAeJC,uBAxBA,CACXL,UAAW,CACTM,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAmBHJ,CAAmBd,GCpBnBmB,EARD,WACV,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBCKGc,EARC,WACZ,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBCKGe,EARD,WACV,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wDCQGgB,EAVI,WACf,OACIlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,GAAG,KAAZ,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,GAAG,UAAZ,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,GAAG,YAAZ,6BCgBNC,mLACK,IAAAC,EAC4BxB,KAAKC,MAAhCF,EADDyB,EACCzB,QAAS0B,EADVD,EACUC,cACjB,OACEvB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEH,UAAWN,EAAQ2B,OACnBC,SAAS,SACTzB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASH,UAAWN,EAAQ6B,SAC1B1B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACIC,QAAQ,KACRC,MAAM,UACNL,UAAWN,EAAQ8B,OAHvB,SAWA3B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEH,UAAWN,EAAQ+B,WACnBpB,MAAM,UACNqB,QAASN,GACTvB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,OAOF9B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEE,MAAM,UACNL,UAAWN,EAAQkC,YACnBC,UAAWC,IACXb,GAAG,UACHpB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQ3B,UAAWN,EAAQqC,kBAL7B,kBA9BiBzB,aA4CZC,uBA/DA,SAAAyB,GAAK,MAAK,CACvBX,OAAQ,CACNY,UAAW,SACXC,OAAQ,MAEVH,gBAAiB,CACfI,YAAaH,EAAMI,QAAQC,KAC3BC,SAAU,IAEZf,QAAS,CACPb,eAAgB,iBAElBc,MAAO,CACLF,SAAU,WACViB,KAAM,EACNC,MAAO,KAgDIjC,CAAmBW,GClD5BuB,4LAEK,IACC/C,EAAYC,KAAKC,MAAjBF,QACR,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAeC,SAAUC,UACvB/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQ6B,UACxB1B,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACAjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,KAAK,IAAInB,UAAWpC,EAAMwD,OAAK,IACtCpD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,KAAK,SAASnB,UAAWjB,IAChCf,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,KAAK,WAAWnB,UAAWhB,IAClChB,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOlB,UAAWf,eAfZR,cAwBHC,uBA5BA,SAAAyB,GAAK,MAAK,CACvBT,QAASS,EAAMkB,OAAO3B,UA2BThB,CAAmBkC,GC9BdU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8c98e2ae.chunk.js","sourcesContent":["import React, { Component} from \"react\";\nimport { withStyles, Typography } from \"@material-ui/core\";\nimport classNames from 'classname';\n\nimport '../styles/global.css';\n\nconst styles = {\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }\n  }\n\nclass Home extends Component {\n    render() {\n        const {classes} = this.props;\n        return (\n        <div className={classNames('fillParent', classes.container)}>\n            <Typography \n                variant=\"h6\"\n                color=\"inherit\">\n            Home\n            </Typography>\n        </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(Home);","import React from \"react\";\n\nconst About = () => {\n    return (\n        <div>\n            <p>About</p>\n        </div>\n    );\n}\n\nexport default About;","import React from \"react\";\n\nconst Contact = () => {\n    return (\n        <div>\n            <p>Contact</p>\n        </div>\n    );\n}\n\nexport default Contact;","import React from \"react\";\n\nconst Error = () => {\n    return (\n        <div>\n            <p>Error: Path does not exist!!!!!</p>\n        </div>\n    );\n}\n\nexport default Error;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navigation = () => {\n    return (\n        <div>\n            <NavLink to=\"/\">Roots</NavLink>\n            <NavLink to=\"/about\">About</NavLink>\n            <NavLink to=\"/contact\">Contact</NavLink>\n        </div>\n    );\n};\n\nexport default Navigation;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { AppBar, Button, IconButton, Toolbar, Typography, withStyles } from '@material-ui/core';\nimport { Person, Menu } from '@material-ui/icons';\n\nconst styles = theme => ({\n  appBar: {\n    textAlign: 'center',\n    zIndex: 1400,\n  },\n  loginButtonIcon: {\n    marginRight: theme.spacing.unit,\n    fontSize: 20,\n  },\n  toolbar: {\n    justifyContent: 'space-between'\n  },\n  title: {\n    position: 'absolute',\n    left: 0,\n    right: 0\n  }\n});\n\nclass RootsToolbar extends Component {\n  render() {\n    const { classes, onMenuClicked } = this.props;\n    return (\n      <AppBar\n        className={classes.appBar}\n        position=\"fixed\">\n        <Toolbar className={classes.toolbar}>\n          <Typography \n              variant=\"h6\" \n              color=\"inherit\"\n              className={classes.title}>\n              ROOTS\n            </Typography>\n          {\n            // This button passes its onClick prop to the onMenuClicked prop.\n            // If you look back at App.js, this essentially tells App to open\n            // the drawer.\n          }\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\" \n            onClick={onMenuClicked}>\n            <Menu />\n          </IconButton>\n          {\n            // This button uses the Link component to redirect the user to the\n            // login page. Note that BobaToolbar doesn't need withRouter\n            // because it's built into the Link component.\n          }\n          <Button\n            color=\"inherit\"\n            className={classes.loginButton}\n            component={Link}\n            to=\"/about\">\n            <Person className={classes.loginButtonIcon}/>\n            Login\n          </Button>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nexport default withStyles(styles)(RootsToolbar);","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport { withStyles } from '@material-ui/core';\n\nimport Home from \"./components/home\";\nimport About from \"./components/about\";\nimport Contact from \"./components/contact\";\nimport Error from \"./components/error\";\nimport Navigation from \"./components/navigation\";\nimport RootsToolbar from \"./components/toolbar\";\n\nimport './App.css';\nimport './styles/global.css';\n\nconst styles = theme => ({\n  toolbar: theme.mixins.toolbar,\n});\n\nclass App extends Component {\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"App\">\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <div className=\"fillParent\">\n            <RootsToolbar/>\n            <Navigation />\n            <div className={classes.toolbar} />\n            <Switch>\n            <Route path=\"/\" component={Home} exact/>\n            <Route path=\"/about\" component={About}/>\n            <Route path=\"/contact\" component={Contact}/>\n            <Route component={Error}/>\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}